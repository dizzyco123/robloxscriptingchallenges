{
    "challenges": [
        {
            "id": 1,
            "name": "Even Odd",
            "difficulty": "beginner",
            "level": "I",
            "timeCreated": "2025-09-04T22:55:29+00:00",
            "shortDescription": "Write a script that prints numbers 1-20 to the Output, labeling each as 'Even' or 'Odd'.",
            "fullDescription": "This challenge should teach you the basics of loops, as well as conditionals via if statements. It serves as a good introduction to programming logic in Luau without the use of anything within the game world.<br><br>Create a script that prints the numbers 1 through 20 to the Output window. Each number should be followed by a dash and either the word 'Even' or 'Odd' depending on whether the number is even or odd. You must use logic to determine if each number is even or odd - you cannot simply alternate between the two labels.",
            "requirements": [
                "Print all numbers from 1 to 20 to the Output",
                "Label each number as either 'Even' or 'Odd'",
                "Use mathematical logic to determine even/odd"
            ],
            "exampleOutput": "> 1 - Odd\n> 2 - Even\n> 3 - Odd\n...\n> 20 - Even",
            "hint": "A number is even if dividing it by 2 leaves no remainder. Use the modulus operator (%) to check the remainder.",
            "resources": [
                {"name": "Tutorial: Intro to for loops", "url": "https://create.roblox.com/docs/tutorials/fundamentals/coding-4/intro-to-for-loops"},
                {"name": "Tutorial: Intro to if statements", "url": "https://create.roblox.com/docs/tutorials/fundamentals/coding-3/intro-to-if-statements"}
            ]
        },
        {
            "id": 2,
            "name": "Pressure Plates",
            "difficulty": "beginner",
            "level": "I",
            "timeCreated": "2025-09-04T22:55:29+00:00",
            "shortDescription": "Make a part that, when touched, prints the name of the player that touched it.",
            "fullDescription": "This challenge aims to test the basics of Events (known internally to Roblox as RBXScriptSignals). These events fire when a certain thing occurs; for example, part.Touched will fire once the part is touched by anything unanchored. Using :Connect() can then connect this event to a function in order to run code.<br><br>Create a single part in the Workspace. In a script, if this part is touched by a player (and only a player), print that player's name to the Output, as so:<br><br>[player name] is touching the part!",
            "requirements": [
                "Detect when a part is touched",
                "Validate that the part was touched by a player, and not anything else",
                "Get and print the name of the player"
            ],
            "exampleOutput": "> dizzyco123 is touching the part!\n> dizzyco123 is touching the part!\n> Dukhibu1 is touching the part!",
            "resources": [
                {"name": "Tutorial: Events", "url": "https://create.roblox.com/docs/scripting/events"},
                {"name": "Players (service)", "url": "https://create.roblox.com/docs/reference/engine/classes/Players"}
            ]
        },
        {
            "id": 3,
            "name": "Chromatic",
            "difficulty": "beginner",
            "level": "I",
            "timeCreated": "2025-09-04T22:55:29+00:00",
            "shortDescription": "Make a part that constantly changes to a random color.",
            "fullDescription": "Properties in Roblox are attributes of an Instance that define how the Instance will look or act. Examples of properties of a Part could be Position, Size, or color. Color is actually represented as two properties: Color3, and BrickColor. BrickColor is a type that consists of 208 pre-made colors, while Color3 represents any color with red, green, and blue values, each from 0 to 1.<br><br>Create a single part in the Workspace. In a script, using a 'while' loop, make the part change color every 0.5 seconds to a random color. The random color should be a Color3, being constructed from RGB values randomized from 0-255.",
            "requirements": [
                "Change a part's color every 0.5 seconds",
                "Randomize the part's color via 3 randomized RGB values"
            ],
            "hint": "Use Color3.fromRGB to construct a Color3 value from RGB (three values from 0-255). Utilize math.random() to randomize each value.",
            "resources": [
                {"name": "Color3 datatype", "url": "https://create.roblox.com/docs/reference/engine/datatypes/Color3"},
                {"name": "Tutorial: repeat code with while loops", "url": "https://create.roblox.com/docs/tutorials/fundamentals/coding-4/repeat-code-with-while-loops"},
                {"name": "math library", "url": "https://create.roblox.com/docs/reference/engine/libraries/math"}
            ]
        },
        {
            "id": 4,
            "name": "Leaderboard Clicker",
            "difficulty": "beginner",
            "level": "III",
            "timeCreated": "2025-09-04T22:55:29+00:00",
            "shortDescription": "Use the Roblox leaderboard to show value 'Clicks' for each player. Make a green part and a red part, to increment and decrement the Clicks respectfully when clicked.",
            "fullDescription": "This challenge should test your knowledge on Roblox's Leaderstats system, which can show values for each player on the leaderboard. This challenge also utilizes ClickDetectors to detect when a player clicks a part.<br><br>Create a green part and red part in Workspace. Using <strong>one</strong> script, increment a player's Clicks value by 1 when they click on the green part, and decrement their Clicks by 1 when clicking on the red part. This can all be done on the server.",
            "requirements": [
                "Set up leaderstat values for each player that joins the game",
                "Detect when one of the two parts are clicked",
                "Increment/decrement the leaderstat value"
            ],
            "hint": "Use the Players.PlayerAdded event, which fires when a new player joins your game. Then, create the leaderstats folder as well as necessary IntValues, for each player.",
            "resources": [
                {"name": "Tutorial: In-experience leaderboards (leaderstats)", "url": "https://create.roblox.com/docs/players/leaderboards"},
                {"name": "ClickDetector", "url": "https://create.roblox.com/docs/reference/engine/classes/ClickDetector"}
            ]
        },
        {
            "id": 5,
            "name": "Spleef",
            "difficulty": "novice",
            "level": "I",
            "timeCreated": "2025-09-04T22:55:29+00:00",
            "shortDescription": "Create a grid of tiles that disappear gradually on touch, then reappear after a short duration.",
            "fullDescription": "Only one script should be used for the purposes of this challenge. The script should programmatically spawn a 5x5 square grid of parts (25 parts in total). Each part represents a thin tile, with size of (4, 1, 4). When a player touches a tile, it should disappear over the course of 1 second using a tween. After 5 seconds, the tile should reappear instantaneously. Tiles that have disappeared should become non-collidable, but only after they are completely transparent.<br><br><img src='src/media/spleef_demonstration.gif'>",
            "requirements": [
                "Use nested for loops to create a 5x5 grid of parts",
                "Detect when a player touches a part",
                "Fade the tile out to transparent, making it non-collidable afterwards",
                "Make the tile reappear after 5 seconds"
            ],
            "hint": "Make use of how a for loop's variable will increment in order to position each tile. You can multiply this incrementing number by 4 (the width of each tile).",
            "resources": [
                {"name": "TweenService", "url": "https://create.roblox.com/docs/reference/engine/classes/TweenService"},
                {"name": "Tutorial: Intro to for loops", "url": "https://create.roblox.com/docs/tutorials/fundamentals/coding-4/intro-to-for-loops"},
                {"name": "Tutorial: Events", "url": "https://create.roblox.com/docs/scripting/events"}
            ]
        },
        {
            "id": 6,
            "name": "My Pet Robot",
            "difficulty": "novice",
            "level": "II",
            "timeCreated": "2025-09-04T22:55:29+00:00",
            "shortDescription": "Make a robot NPC that pathfinds to the position of any player who chats 'Follow me!'",
            "fullDescription": "You've recently gotten hired at a startup humanoid robotics company, with an investor demonstration in just a week. They give you the task of programming their robot to follow simple locomotion commands. If a nearby person orders for the robot to follow them, the robot should oblige and walk to their ready. Since the investors wouldn't be too impressed if the robot kept tripping over things, it must navigate the world while taking obstacles and walls into account.<br><br>This challenge will utilize PathfindingService, which is Roblox's built-in pathfinding that makes it simple for an agent to find the shortest path to a point. Find a humanoid rig on the toolbox that represents a robot. When any player chats the term 'Follow me!' (accepting any case), the robot should pathfind to the chatting player and move to their location continually, stopping once it reaches within 10 studs of the player. If a separate player chats the term, the robot should interrupt its own pathfinding and target the newer player. If no path is found to the chatting player, the robot can stay in place and should chat 'No path.'<br><br>A fun way to test the pathfinding: insert a maze map from the Toolbox, or make your own. Then allow the robot to find its way through the maze to reach you.",
            "requirements": [
                "Check if a player chats the term 'Follow me!'",
                "Make the NPC continually walk to the chatting player",
                "Make the NPC itself chat 'No path.' if the pathfinding resulted in a status of NoPath"
            ],
            "hint": "To find if the robot is within 10 studs of the player, utilize (point1 - point2).Magnitude. This subtracts the vectors of each point and finds the vector magnitude of the new vector, effectively returning the distance in studs.",
            "resources": [
                {"name": "PathfindingService", "url": "https://create.roblox.com/docs/reference/engine/classes/PathfindingService"},
                {"name": "Humanoid:MoveTo()", "url": "https://create.roblox.com/docs/reference/engine/classes/Humanoid#MoveTo"},
                {"name": "The Player.Chatted event", "url": "https://create.roblox.com/docs/reference/engine/classes/Player#Chatted"}
            ]
        },
        {
            "id": 7,
            "name": "Passcode Protected",
            "difficulty": "novice",
            "level": "III",
            "timeCreated": "2025-09-04T22:55:29+00:00",
            "shortDescription": "Create a metal door with a keypad, only opening the door if the correct passcode is inputted.",
            "fullDescription": "You are a secret supervillain looking to hide your lair from anyone looking to foil your evil plans. At the front of your lair, you'd like a thick metal door installed. To open it, you'd also like a keypad installed on the same wall, only allowing the door to open if the super-confidential code '1234' is inputted.<br><br>In Workspace, create the scene described. The keypad should be made out of an array of small, square parts, arranged in the standard keypad formation. A green button to the right of the '0' key should serve as the 'Enter' button. ClickDetectors should be used for each button for detecting clicks.<br><br>A player's current code should be specific to them and must not affect any other players. Any further inputs past 4 digits should be ignored. Once the submit button is pressed, check if the code matches '1234'; if so, open the door by sliding it up with a tween (of course, you can't be letting anyone in behind you, so ensure that the door closes within 5 seconds). If the incorrect code is inputted, reset that player's code and allow them to try again.<br><br><img src='src/media/passcode_protected_door.png'>",
            "requirements": [
                "Create a door with a keypad",
                "When a number key is clicked, add that digit to the player's current attempt",
                "Once the green 'Enter' button is clicked, validate that the entered code is '1234'",
                "Use a tween to open the door if the code is correct; else, reset the code",
                "Ensure that the door closes after 5 seconds"
            ],
            "hint": "Use a table (dictionary) with player.UserId as the key to store each player's code separately. The string concatenation operator '..' adds digits together. Use #string to get the length of a string.",
            "resources": [
                {"name": "ClickDetector", "url": "https://create.roblox.com/docs/reference/engine/classes/ClickDetector"},
                {"name": "Tutorial: Tables", "url": "https://create.roblox.com/docs/luau/tables"},
                {"name": "TweenService", "url": "https://create.roblox.com/docs/reference/engine/classes/TweenService"}
            ]
        },
        {
            "id": 8,
            "name": "Resource Distribution",
            "difficulty": "advanced",
            "level": "I",
            "timeCreated": "2025-09-04T22:55:29+00:00",
            "shortDescription": "Make a grid of parts, distributing 15 trees (green) and 8 mines (yellow) randomly, while placing no mines adjacent to any trees.",
            "fullDescription": "You're building a resource management game where players establish camps to harvest lumber and ore. The landscape needs to be procedurally generated with realistic resource distribution. Forests (represented by green parts) naturally grow in clusters, so trees can be placed next to each other. However, ore mines (orange parts) require a full 3x3 clearing around them, so they should not be adjacent to any other resources (including diagonals). Your algorithm must ensure resources are distributed randomly while respecting these environmental constraints.<br><br>Create a 10x10 grid of 1x1x1 parts (100 parts total), then spawn 15 trees and 8 mines following these placement rules: trees can be adjacent to other trees, but never to mines. Mines must have a completely clear 3x3 area around them (including diagonals). 'Spawning' a resource means replacing the color of the part at the resource's position to the resource's color. This challenge should test your ability to work with 2D arrays and validate positions.<br><br><img src='src/media/resource_distribution.png'>",
            "requirements": [
                "Create a 10x10 grid of small parts via script",
                "Spawn 15 forests (green) and 8 ore mines (orange) by replacing the colors of certain parts",
                "Resources should be randomly distributed, but with the stated placement rules"
            ],
            "hint": "Ordering matters! Since mines take up more space, spawn them first before spawning any trees.",
            "resources": [
                {"name": "Tutorial: Tables", "url": "https://create.roblox.com/docs/luau/tables"}
            ]
        },
        {
            "id": 9,
            "name": "Spider Kinematics",
            "difficulty": "expert",
            "level": "I",
            "timeCreated": "2025-10-04T22:55:29+00:00",
            "shortDescription": "Create a procedural leg animation system using inverse kinematics for a spider-like creature.",
            "fullDescription": "Forget Roblox's animation system. Use procedural animation to create a six-legged creature (spider) whose legs dynamically adapt to terrain using inverse kinematics (IK). Each leg should raycast to find ground, calculate the angle needed to reach that point, then smoothly animate there. Legs should lift and step forward when they're too far behind the body's movement. This requires understanding trigonometry and CFrame manipulation.<br><br>Build a spider rig with 6 legs, each having 3 segments (hip, knee, foot). Use two-bone IK to calculate joint angles so feet always touch the ground. Implement a gait system where legs move in alternating tripods (3 legs down, 3 legs stepping). Each leg should raycast downward to find terrain height and smoothly tween to that position.",
            "requirements": [
                "Create a spider model with 6 legs, each with 3 connected parts (hip, knee, foot)",
                "Implement two-bone inverse kinematics to calculate joint angles",
                "Each leg should raycast downward to detect ground height",
                "Calculate target position for foot based on body movement and ground detection",
                "Implement a stepping system: when a foot is too far from target, lift and step",
                "Use alternating tripod gait (legs 1,3,5 move while 2,4,6 are planted, then switch)",
                "Smoothly interpolate leg positions and rotations using CFrame:Lerp() or tweens",
                "Handle slopes, stairs, and uneven terrain naturally",
                "Make the spider body tilt slightly based on leg heights for realism"
            ],
            "hint": "Use the law of cosines to solve for joint angles. For the stepping gait, track whether legs are in the 'grounded' or 'stepping' phase.",
            "resources": [
                {"name": "Procedural Animation", "url": "https://www.youtube.com/watch?v=e6Gjhr1IP6w"},
                {"name": "CFrame", "url": "https://create.roblox.com/docs/reference/engine/datatypes/CFrame"}
            ]
        },
        {
            "id": 10,
            "name": "Color Memory",
            "difficulty": "novice",
            "level": "II",
            "timeCreated": "2025-10-11T22:55:29+00:00",
            "shortDescription": "Recreate the classic 4-color memory game (also known as Simon).",
            "fullDescription": "You've likely played with one of these toys at some point:<br><br><img src='src/media/simon.jpg'><br><br>The game itself is very simple: one of the 4 colored buttons will light up with a sound, which you then reciprocate by pressing the samely-colored button. Each time your input is correct, the sequence will grow by one, displaying all previous colors in order, plus a new one.<br><br>Your job is to recreate this game within Roblox. Create 4 square parts in Workspace with these 4 colors: yellow, red, blue, green. The game will be played entirely on client (via a LocalScript), and after 5 seconds of the player joining, the game will start. When a button is clicked (via ClickDetector) or shown by the sequence, its material should become Neon to make it glow. Input from the player should only affect their attempt after the entire sequence has been displayed.<br><br>When the player messes up a color in the sequence, the game should immediately stop, and all buttons should become white. If the attempted sequence is correct, continue with the game and make the sequence one color longer. If you'd like, add sounds to the game for when a color is displayed or clicked.<br><br><img src='src/media/color_memory.gif' width='400'><br><br>",
            "requirements": [
                "Make four parts with the four different colors of the Simon game",
                "Show a sequence of colors by lighting up the corresponding buttons",
                "Detect clicks on each button",
                "If the sequence inputted is correct, play the sequence again with one new color",
                "If the sequence is incorrect, stop the game and turn all parts white"
            ],
            "hint": "You can use a variable table to hold the player's current attempted sequence. Reset the table when the pattern finishes displaying, and then wait until the table reaches the full length of the sequence, or until a color is inputted incorrectly.",
            "resources": [
                {"name": "Tutorial: Tables", "url": "https://create.roblox.com/docs/luau/tables"},
                {"name": "ClickDetector", "url": "https://create.roblox.com/docs/reference/engine/classes/ClickDetector"}
            ]
        }
    ]
}